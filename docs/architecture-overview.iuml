@startuml architecture-overview

card global_stores #limegreen {
  database db <<persistent>>
  storage eph <<ephemeral>>
}

package graphql_operations #navajowhite [
  (imperative shells)
  ....
  get job and cache it,
  list jobs,
  batch-get contents and
  cache them
  ...
]

package screens #skyblue [
  - query and subscribe to changes in data in RxDB
  - render translation of data to view
  - stateless, aside from form data
]

package services #hotpink [
  - app interface to external APIs (many of which are env-specific)
  - expose system events as Documents in RxDB Collections
  - wrap external API methods
  ....
  camera
  file system
  uploader
  network connectivity
  ...
]

package coordinators #lightsalmon [
  - coordinate 2 or more services
  - "hear about" system events via query-and-observation
    of RxDB Documents
  ....
  upload coordinator
  ...
]

node "<&monitor> dev's computer" as computer #mediumvioletred
node "<&phone> device" as device #mediumvioletred
node "GraphQL API" as gql #moccasin

graphql_operations -left-> global_stores #darkgreen : "read-write"
graphql_operations -right-> gql
graphql_operations <-right- gql

screens <--- global_stores #blue : "read-only"
screens -> graphql_operations : "xf : user action => fn()\ne.g., 'get job', 'set workflow'"
screens --> services : "xf : user action => fn()\ne.g., 'open camera'"

services ---> global_stores #darkseagreen : "write-only"
computer <-up- services
computer -up-> services
device <-up- services
device -up-> services

coordinators -down-> services : "do I/O on device"
global_stores <-down- coordinators #darkseagreen : "write"
global_stores -down-> coordinators #blue : "observe"
graphql_operations <-down- coordinators : "query, mutate"

@enduml